# Code adapted from https://github.com/astral-sh/uv-docker-example/blob/main/multistage.Dockerfile
# NOTE: --mount relies on BuildKit which is NOT usable with the deploy() command (using this Dockerfile as base image) for prefect v3 flows (prefect.utilities.dockerutils.BuildError: the --mount option requires BuildKit. Refer to https://docs.docker.com/go/buildkit/ to learn how to build images with BuildKit enabled)
# IIUC, this is due to a limitation of an underlying dependency: https://github.com/PrefectHQ/prefect/issues/12922
# Therefore, I piped the original code through an AI and had it genereate a new Dockerfile that does not use --mount, but instead uses COPY to copy the files into the image.
# ---- Stage 1: builder ----
FROM ghcr.io/astral-sh/uv:python3.13-bookworm-slim AS builder
ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy
ENV UV_PYTHON_DOWNLOADS=0

WORKDIR /app

# copy only dependency files first (for Docker cache optimization)
# root deps (pyproject.toml + lockfile)
COPY pyproject.toml uv.lock ./
# worker deps (only pyproject.toml, shares lockfile with root)
COPY workers/ai_image_detection/pyproject.toml ./workers/ai_image_detection/
# copy flow-utils lib (whole directory, incl. source code)
COPY lib/flow-utils ./lib/flow-utils

# install dependencies *only* (won't trigger cache bust if code changes)
RUN uv sync --locked --no-install-project --no-dev --package ai_image_detection

# copy the full worker code
COPY workers/ai_image_detection ./workers/ai_image_detection

# install full code for worker package with dependencies (no dev)
RUN uv sync --locked --no-dev --package ai_image_detection

# ---- Stage 2: final ----
FROM python:3.13-slim-bookworm

WORKDIR /app

# copy the built virtualenv and source from builder
COPY --from=builder /app /app

# place executables at front of PATH
ENV PATH="/app/.venv/bin:$PATH"

